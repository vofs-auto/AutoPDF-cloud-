from flask import Flask, render_template, request, send_file, jsonify
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from io import BytesIO
from datetime import datetime, date
from PyPDF2 import PdfReader
import os
import json

app = Flask(__name__)

# Simple persistent counter file
COUNTER_FILE = "pdf_counter.json"
if not os.path.exists(COUNTER_FILE):
    with open(COUNTER_FILE, "w") as f:
        json.dump({"count": 0}, f)

def read_counter():
    try:
        with open(COUNTER_FILE, "r") as f:
            data = json.load(f)
            return int(data.get("count", 0))
    except:
        return 0

def write_counter(value):
    with open(COUNTER_FILE, "w") as f:
        json.dump({"count": int(value)}, f)

PDF_COUNTER = read_counter()

# --- PDF helpers (single and batch card PDF) ---
def generate_simple_pdf_from_text(text_bytes_io, text):
    c = canvas.Canvas(text_bytes_io, pagesize=A4)
    width, height = A4
    c.setFont("Helvetica-Bold", 14)
    c.drawString(50, height - 50, "AutoPDF Cloud - Generated Document")
    c.setFont("Helvetica", 11)
    y = height - 80
    for line in text.splitlines():
        if y < 60:
            c.showPage()
            c.setFont("Helvetica", 11)
            y = height - 60
        c.drawString(50, y, line[:100])
        y -= 16
    # watermark
    c.setFont("Helvetica-Oblique", 9)
    c.setFillGray(0.5)
    c.drawRightString(width - 40, 30, "Generated by AutoPDF Cloud")
    c.showPage()
    c.save()
    text_bytes_io.seek(0)

def generate_cards_pdf_from_rows(buf_io, rows):
    c = canvas.Canvas(buf_io, pagesize=A4)
    width, height = A4
    for i, row in enumerate(rows, start=1):
        # Background card
        margin = 50
        card_h = height - 2*margin
        # Header title
        c.setFont("Helvetica-Bold", 18)
        c.setFillColorRGB(0, .9, 1)
        c.drawString(margin, height - 70, "AutoPDF Cloud")
        c.setFillColorRGB(1,1,1)
        c.setFont("Helvetica-Bold", 14)
        name = row.get("name", "").strip() or "N/A"
        subject = row.get("subject", "").strip() or "N/A"
        date_field = row.get("date", "").strip() or "N/A"
        details = row.get("details", "").strip() or ""

        y = height - 110
        c.drawString(margin, y, f"Name / Product: {name}")
        y -= 20
        c.setFont("Helvetica", 12)
        c.drawString(margin, y, f"Title / Subject: {subject}")
        y -= 18
        c.drawString(margin, y, f"Date: {date_field}")
        y -= 20

        # details (multiple lines)
        c.setFont("Helvetica", 11)
        text_obj = c.beginText(margin, y)
        text_obj.setLeading(14)
        for line in details.splitlines():
            text_obj.textLine(line)
        c.drawText(text_obj)

        # watermark
        c.setFont("Helvetica-Oblique", 9)
        c.setFillGray(0.5)
        c.drawRightString(width - margin, 30, "Generated by AutoPDF Cloud")

        if i < len(rows):
            c.showPage()
    c.showPage()
    c.save()
    buf_io.seek(0)

# --- Routes for pages (integrated) ---
@app.route("/")
def index():
    count = read_counter()
    return render_template("index.html", count=count)

@app.route("/about")
def about():
    count = read_counter()
    return render_template("about.html", count=count)

@app.route("/privacy")
def privacy():
    count = read_counter()
    return render_template("privacy.html", count=count)

@app.route("/terms")
def terms():
    count = read_counter()
    return render_template("terms.html", count=count)

@app.route("/contact")
def contact():
    count = read_counter()
    return render_template("contact.html", count=count)

# --- PDF endpoints (keep as before) ---
@app.route("/generate_pdf", methods=["POST"])
def generate_pdf():
    global PDF_COUNTER
    text = request.form.get("text", "").strip()
    if not text:
        return jsonify({"error":"No text provided"}), 400
    buf = BytesIO()
    generate_simple_pdf_from_text(buf, text)
    # update counter
    PDF_COUNTER = read_counter() + 1
    write_counter(PDF_COUNTER)
    return send_file(buf, as_attachment=True, download_name="document.pdf", mimetype="application/pdf")

@app.route("/upload_pdf", methods=["POST"])
def upload_pdf():
    if "file" not in request.files:
        return jsonify({"error":"No file uploaded"}), 400
    file = request.files["file"]
    try:
        reader = PdfReader(file)
        text = ""
        for p in reader.pages:
            text += (p.extract_text() or "") + "\n"
        return jsonify({"text": text})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/generate_batch", methods=["POST"])
def generate_batch():
    global PDF_COUNTER
    data = request.get_json(silent=True)
    if not data:
        return jsonify({"error":"Invalid JSON"}), 400
    rows = data.get("rows", [])
    if not rows or not isinstance(rows, list):
        return jsonify({"error":"No rows provided"}), 400
    buf = BytesIO()
    generate_cards_pdf_from_rows(buf, rows)
    # increment counter by 1 (one document generated) or by len(rows)? we count each generated PDF file
    PDF_COUNTER = read_counter() + 1
    write_counter(PDF_COUNTER)
    return send_file(buf, as_attachment=True, download_name="batch_cards.pdf", mimetype="application/pdf")

@app.route("/counter")
def counter():
    return jsonify({"count": read_counter()})

@app.route("/admin_stats")
def admin_stats():
    count = read_counter()
    today = date.today().isoformat()
    return jsonify({"total": count, "today": today, "users": 1})

# Simple static pages for footer links if needed (already served via templates)
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
